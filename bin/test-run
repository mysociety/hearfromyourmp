#!/usr/bin/perl -w -I../commonlib/perllib
#
# test-run:
# Test harness for HearFromYourMP.  Makes sure we haven't broken the code.
# 
# Requires:
# * ../general/conf file set up for HearFromYourMP, and matching the below requirements
# * apache configured to serve ../web on OPTION_BASE_URL
# * a YCML database with name ending "_testharness"; this script will drop and remake 
#   the database, so make sure it is never used for anything important
# * email addresses (email_n below) configured to pipe to ./test-mailin with fast
#   local delivery, and
#
# Copyright (c) 2005 UK Citizens Online Democracy. All rights reserved.
# Email: francis@mysociety.org; WWW: http://www.mysociety.org/
#
# XXX Missing:
#   Threshold email sending - Done
#   Contact form -Done
#   Posting a message (web, emails) - Done
#   Posting a comment (+ comment alerts) - Done
#   Reporting a comment 
#   Recent messages/replies on home page -Done
#   League table - Done ish

my $rcsid = ''; $rcsid .= '$Id: test-run,v 1.21 2009-07-16 15:57:19 matthew Exp $';

use strict;
require 5.8.0;

use Data::Dumper;
use Carp qw(verbose);
use Storable;
use FindBin;
use Getopt::Long;
use IO::Handle;

use mySociety::Config;
mySociety::Config::set_file('../conf/general');
use mySociety::DBHandle qw(dbh);
use mySociety::WebTestHarness;

print "Set up web test harness...\n";
my ($wth, $action, $verbose, $pause, $multispawn) = mySociety::WebTestHarness::setup({
    actions => [],
    actions_desc => [],
    dbname => 'YCML',
});

# Set up options
our $base_url = mySociety::Config::get('BASE_URL');
our $email_domain = mySociety::Config::get('EMAIL_DOMAIN');
# set the threshold for testing send-rep-threshold-alerts
our $threshold = mySociety::Config::get('THRESHOLD_STEP_STAGING');;
our $postcode = 'SW1A 1AA';

our $reps_message = 'we hope everything is working well';

our $store = {};

sub email_n { my $n = shift; return "ycml-testharness+$n\@$email_domain"; }
sub name_n { my $n = shift; return "Cara Constituent $n"; }

#############################################################################
# Main code

# Configure test harness class
$wth->log_watcher_self_test($base_url . "/test.php?error=1", "deliberate_error_to_test_error_handling");

# Syntax check all .php files
print "Syntax check all PHP files...\n" if $verbose > 0;
$wth->php_check_syntax("../../hearfromyourmp/");
$wth->php_check_syntax("../../hearfromyourmp/templates/emails/", qr//);

date_print("Basic signup test...");
do_basic_signup_test();

date_print("Testing threshold: threshold set to $threshold...");
do_threshold();

date_print("Rep sending message...");
do_rep_send_message();

date_print("Sending message alerts after Reps posting...");
do_send_message_alerts_postrep();

date_print("Posting reply...");
do_post_reply();

date_print("Sending Rep comment alerts...");
do_send_rep_comments_alerts();

#date_print("Sending Comment Alerts");
#do_send_comments_alerts();

date_print("Testing contact form...");
do_contact_form();

date_print("Testing latest messages and latest replies...");
do_recent_messages_replies();

date_print("Testing league table...");
do_league_table();

date_print("Doing abuse report...");
do_abuse_report();
# Check for any unhandled mails or errors
#call_fyrqd();
#print "Checking no emails left at end...\n" if $verbose > 1;
$wth->email_check_none_left();
print "Checking no log file errors at end...\n" if $verbose > 1;
$wth->log_watcher_check();
print "Everything completed successfully\n";

# Print log line with date
sub date_print {
    $_ = shift;
    print scalar localtime() . " $_\n" if $verbose > 0;
}


#############################################################################
# General functions

# Call fyrqd for one pass
#sub call_fyrqd {
#    system("./fyrqd", "--debug", "--once", "--email", # $verbose > 1 ? qw(--verbose) : ()
#        ) and die "Failed to call fyrqd";
#}

#############################################################################

sub do_basic_signup_test {
    $wth->browser_get($base_url);
    $wth->browser_check_contents("Sign up to hear from your MP");
    $wth->browser_check_contents("This is a test site"); 

    # Sign up as constituent
    $wth->browser_submit_form(form_name => 'subscribe_form',
        fields => { name => name_n(1), email => email_n(1), postcode => "$postcode"},  
        );
    $wth->browser_check_contents("Now check your email!"); 

    # Confirm email

    my $confirmation_email = $wth->email_get_containing('%To: "' . name_n(1) . '" <' . email_n(1) . '>%');
    die "HFYMP confirmation link not found\n" if ($confirmation_email !~ m#^\s+(http://.*$)#m);
    my $confirmation_url = $1;
    $wth->email_check_url($confirmation_url);
    print "Confirmation URL: " . $confirmation_url . "\n" if $verbose > 1;
    $wth->browser_get($confirmation_url);
    $wth->browser_check_contents("You're the 1st person to sign up to get emails"); 

    #print $wth->browser_content();
}

#############################################################################

sub do_threshold {
    # test script will take forever if we actually submit the form, wait for the email and click on the confirmation link for 
    # everyone of them, so go straight into the db instead after doing 1 so we can get the area id etc.
    
    $wth->browser_get($base_url);
    $wth->browser_check_contents("Sign up to hear from your MP");
    $wth->browser_check_contents("This is a test site"); 

    $wth->browser_get('/logout');
    $wth->browser_get($base_url);
    $wth->browser_submit_form(form_name => 'subscribe_form',
        fields => { name => name_n(2), email => email_n(2), postcode => "$postcode"},
        );
    $wth->browser_check_contents("Now check your email!");
    my $confirmation_email = $wth->email_get_containing('%To: "' . name_n(2) . '" <' . email_n(2) . '>%');
    die "HFYMP confirmation link not found\n" if ($confirmation_email !~ m#^\s+(http://.*$)#m);
    my $confirmation_url = $1;
    $wth->email_check_url($confirmation_url);
    print "Confirmation URL: " . $confirmation_url . "\n" if $verbose > 1;
    $wth->browser_get($confirmation_url);
    
    # not pretty but it is fast. Could have used Person.pm but doesn't look like it's in use anywhere anymore
    # start by getting the area_id, creation_ipaddr and is_rep for someone so that we can cheat.
    my ($area_id, $creation_ipaddr, $is_rep) = dbh()->selectrow_array("select  area_id, creation_ipaddr, is_rep FROM constituent WHERE postcode = '$postcode' ");
    # insert persons x threshold.
    my $dbid = dbh()->selectrow_array("select nextval('person_id_seq')");
    my $sth = dbh()->prepare("insert into person (id, email, name) values (?, ?, ?)");
    print "creating person(s) for threshold test \n" if $verbose > 1;
    for (my $i = 3; $i <= $threshold; $i++) {
        $sth->execute(($dbid + $i), email_n($i), name_n($i));   
        #print 'db error is ' . dbh()->errstr;
    }
    dbh()->commit();
    
    print "creating constituent(s) for threshold test \n" if $verbose > 1;
    $sth = dbh()->prepare_cached("insert into constituent (person_id, area_id, postcode, creation_ipaddr) values (?, ?, ?, ?)");
    for (my $i = 3; $i <= $threshold; $i++) {
        $sth->execute(($dbid + $i), $area_id, $postcode, $creation_ipaddr);
    }
    dbh()->commit();
    #./send-rep-threshold-alerts --verbose
    my $status = system("./send-rep-threshold-alerts", "--verbose");
    
    
}

sub do_contact_form {
    $wth->browser_get('/contact');
    $wth->browser_check_contents("Contact Us");
    $wth->browser_check_contents("This is a test site"); 
    $wth->browser_submit_form(form_name => 'contact',
        fields => {
            name => name_n(1),
            email => email_n(1),
            subject => "a ycml test subject",
            dest => 'us',
            message => ('a ycml test message from test-run')
        },  
    );
    $wth->browser_check_contents("Thanks for your feedback"); 
    my $confirmation_email = $wth->email_get_containing('%a ycml test message from test-run%');
}

sub do_rep_send_message {
    #currently the message link is the first in the email
    my $signup_email = $wth->email_get_containing('%your constituents would like to hear from you%');
    die "HFYMP reps confirmation link not found\n" if ($signup_email !~ m#^\s+(http://.*$)#m);
    my $confirmation_url = $1;
    $wth->email_check_url($confirmation_url);   
    print "Reps Confirmation URL: " . $confirmation_url . "\n" if $verbose > 1;
    $wth->browser_get($confirmation_url);
    $wth->browser_check_contents("This is a test site"); 
    $wth->browser_check_contents("To post a message through HearFromYourMP"); 
    
    $wth->browser_submit_form(form_name => 'message_form',
        fields => { 'subject' => 'hello from the test suite', 'message' => $reps_message},
        );
    $wth->browser_check_contents("please click this button to confirm your message");
    
    $wth->browser_submit_form(form_name => 'confirm_form',
        fields => {},  
        );
    $wth->browser_check_contents("your message has been posted");
}

sub do_send_message_alerts_postrep {
    my $status = system("./send-message-alerts", "--verbose");
    $wth->email_run_eveld();
    
    my $sentcount = 0;
    for (my $i = 1; $i <= $threshold; $i++) {
    my $confirmation_email = $wth->email_get_containing('%To: "' . name_n($i) . '" <' . email_n($i) . '>%');
        if ($confirmation_email =~ /$reps_message/) {
            if ($i == 1 && $confirmation_email =~ m#^\s+(http://.*$)#m) {
                $store->{'post_comment_url'} = $1;
            }
            ++$sentcount;
        }
    }
    if ($threshold == $sentcount) {
        print "Messages were sent to constituents\n" if $verbose > 0;
    }
    #now check that the emails have been received
}

sub do_post_reply {
    unless ($store->{'post_comment_url'}) {return 0;}
    
    $wth->browser_get($store->{'post_comment_url'});
    $wth->browser_submit_form(form_name => 'commentform',
        fields => { text => 'a reply to the message', emailreplies => '1'},
    );
    $wth->browser_check_contents("Previewing your comment");    

    $wth->browser_submit_form(form_name => 'commentform',
        button => 'post'
    );
    $wth->browser_check_contents("Thank you for your comment");     

}

sub do_send_rep_comments_alerts {
    my $status = system("./send-rep-comment-alerts", "--verbose");
    $wth->email_run_eveld();
    
    #now check that the emails have been received
    my $lookfor = 1;
    for (my $i = 1; $i <= $lookfor; $i++) {
        my $emailcontent = $wth->email_get_containing('%Subject: New comments on %' . name_n($i) . ' wrote at%');
    }

}

sub do_send_comments_alerts {
    my $status = system("./send-comment-alerts", "--verbose");
    $wth->email_run_eveld();
    
    #now check that the emails have been received
    my $lookfor = 1;
    for (my $i = 1; $i <= $lookfor; $i++) {
        my $emailcontent = $wth->email_get_containing('%Hi ' . name_n($i) . '%The following comments have been left%');
    }

}

sub do_recent_messages_replies {
    $wth->browser_get($base_url);
    $wth->browser_check_contents("Latest messages");
    $wth->browser_check_contents("Latest replies"); 
    
}

sub do_league_table {
    $wth->browser_get('/league');
    $wth->browser_check_contents("Current Status");
    $wth->browser_check_contents("This is a test site"); 
    $wth->browser_check_contents(qq[Cities of London and Westminster</a></td><td>Fark Mield</td><td align="center">$threshold</td><td align="center">1</td><td align="center">1</td><td align="center">1</td>]); 
}

sub do_abuse_report {
    # get a comment to complain about
    $wth->browser_get($base_url);
    # find the link to the message and follow it.
    $wth->browser_follow_link(url_regex => qr#/view/message/#i );
    # find the link to the abuse report form and follow it.
    $wth->browser_follow_link(text => 'Is this post abusive?', n => 1);
    print "Submitting abuse report\n" if $verbose > 1;
    $wth->browser_submit_form(form_name => 'abuse',
        fields => { reason => 'this message is spam not ham', email => email_n(10)},  
    );
    $wth->browser_check_contents("One of our team will investigate that comment as soon as possible."); 

    my $abuse_email = $wth->email_get_containing('%Reason given: this message is spam not ham%');   
    
}

